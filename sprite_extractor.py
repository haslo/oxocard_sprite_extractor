import sys
from PIL import Image
import numpy as np
from datetime import datetime

sprite_colors = [
    (0, 0, 0, 0), (8, 8, 8, 1), (40, 40, 40, 1), (64, 64, 64, 1), (88, 88, 88, 1), (104, 104, 104, 1), (120, 120, 120, 1), (128, 132, 128, 1), (144, 148, 144, 1), (160, 164, 160, 1), (176, 180, 176, 1), (192, 192, 192, 1), (208, 208, 208, 1), (224, 224, 224, 1), (240, 240, 240, 1), (248, 252, 248, 1),
    (208, 20, 88, 1), (192, 176, 152, 1), (248, 232, 216, 1), (96, 200, 208, 1), (128, 136, 192, 1), (184, 152, 200, 1), (248, 60, 128, 1), (184, 252, 0, 1), (24, 252, 72, 1), (0, 252, 248, 1), (248, 0, 248, 1), (0, 0, 248, 1), (224, 112, 112, 1), (232, 124, 120, 1), (240, 148, 136, 1), (248, 172, 160, 1),
    (248, 176, 176, 1), (248, 204, 176, 1), (248, 216, 176, 1), (248, 248, 176, 1), (240, 244, 184, 1), (216, 236, 192, 1), (176, 220, 192, 1), (176, 228, 224, 1), (176, 228, 248, 1), (176, 212, 232, 1), (192, 192, 216, 1), (216, 188, 216, 1), (248, 184, 208, 1), (232, 224, 208, 1), (224, 212, 200, 1), (208, 200, 184, 1),
    (248, 152, 152, 1), (248, 184, 152, 1), (248, 204, 152, 1), (248, 248, 152, 1), (232, 240, 160, 1), (208, 232, 176, 1), (152, 208, 176, 1), (152, 220, 216, 1), (152, 220, 248, 1), (152, 196, 224, 1), (168, 172, 208, 1), (208, 168, 208, 1), (248, 164, 200, 1), (232, 212, 192, 1), (216, 200, 184, 1), (200, 180, 160, 1),
    (248, 124, 120, 1), (248, 168, 120, 1), (248, 192, 120, 1), (248, 244, 120, 1), (232, 236, 144, 1), (192, 224, 152, 1), (120, 200, 160, 1), (120, 212, 200, 1), (120, 212, 248, 1), (120, 184, 216, 1), (144, 152, 200, 1), (200, 144, 192, 1), (240, 140, 184, 1), (224, 204, 176, 1), (208, 188, 168, 1), (184, 164, 144, 1),
    (248, 100, 96, 1), (248, 152, 96, 1), (248, 180, 96, 1), (248, 244, 96, 1), (224, 236, 120, 1), (184, 220, 136, 1), (96, 188, 136, 1), (96, 200, 192, 1), (96, 204, 248, 1), (96, 168, 208, 1), (128, 128, 184, 1), (184, 124, 184, 1), (240, 120, 168, 1), (216, 196, 160, 1), (200, 176, 144, 1), (168, 148, 120, 1),
    (248, 76, 72, 1), (248, 132, 72, 1), (248, 168, 72, 1), (248, 240, 72, 1), (224, 232, 96, 1), (168, 212, 120, 1), (72, 176, 120, 1), (72, 192, 184, 1), (72, 196, 248, 1), (72, 152, 208, 1), (104, 108, 176, 1), (176, 100, 176, 1), (240, 96, 160, 1), (208, 184, 152, 1), (192, 160, 128, 1), (152, 128, 96, 1),
    (248, 48, 48, 1), (248, 116, 48, 1), (248, 156, 48, 1), (248, 240, 48, 1), (216, 228, 72, 1), (160, 208, 96, 1), (48, 168, 104, 1), (48, 184, 176, 1), (48, 184, 248, 1), (48, 140, 200, 1), (88, 88, 168, 1), (168, 80, 160, 1), (240, 72, 144, 1), (208, 176, 136, 1), (184, 148, 112, 1), (144, 112, 80, 1),
    (248, 24, 24, 1), (248, 100, 24, 1), (248, 144, 24, 1), (248, 236, 24, 1), (216, 224, 48, 1), (144, 204, 80, 1), (24, 156, 80, 1), (24, 176, 160, 1), (24, 176, 248, 1), (24, 124, 192, 1), (64, 68, 152, 1), (152, 60, 152, 1), (232, 52, 128, 1), (200, 164, 120, 1), (168, 136, 96, 1), (128, 92, 56, 1),
    (248, 0, 0, 1), (248, 84, 0, 1), (248, 132, 0, 1), (248, 236, 0, 1), (208, 224, 32, 1), (136, 196, 56, 1), (0, 144, 64, 1), (0, 168, 152, 1), (0, 168, 248, 1), (0, 112, 184, 1), (40, 48, 144, 1), (144, 36, 136, 1), (232, 28, 120, 1), (192, 156, 104, 1), (160, 124, 80, 1), (112, 76, 32, 1),
    (224, 0, 0, 1), (224, 76, 0, 1), (224, 116, 0, 1), (224, 212, 0, 1), (192, 200, 24, 1), (120, 176, 56, 1), (0, 132, 56, 1), (0, 152, 136, 1), (0, 152, 224, 1), (0, 100, 168, 1), (40, 44, 128, 1), (128, 32, 128, 1), (208, 24, 104, 1), (176, 140, 96, 1), (144, 112, 72, 1), (104, 68, 32, 1),
    (200, 0, 0, 1), (200, 68, 0, 1), (200, 104, 0, 1), (200, 188, 0, 1), (168, 176, 24, 1), (112, 156, 48, 1), (0, 116, 48, 1), (0, 132, 120, 1), (0, 136, 200, 1), (0, 88, 144, 1), (32, 36, 112, 1), (112, 28, 112, 1), (184, 24, 96, 1), (152, 124, 80, 1), (128, 96, 64, 1), (88, 60, 24, 1),
    (176, 0, 0, 1), (176, 56, 0, 1), (176, 92, 0, 1), (176, 164, 0, 1), (144, 156, 16, 1), (96, 136, 40, 1), (0, 100, 48, 1), (0, 116, 104, 1), (0, 120, 176, 1), (0, 76, 128, 1), (32, 32, 96, 1), (96, 24, 96, 1), (160, 20, 80, 1), (136, 108, 72, 1), (112, 84, 56, 1), (80, 52, 24, 1),
    (152, 0, 0, 1), (152, 48, 0, 1), (152, 76, 0, 1), (152, 140, 0, 1), (128, 132, 16, 1), (80, 116, 32, 1), (0, 88, 40, 1), (0, 100, 88, 1), (0, 100, 152, 1), (0, 68, 112, 1), (24, 28, 88, 1), (88, 20, 80, 1), (136, 16, 72, 1), (112, 92, 64, 1), (96, 72, 48, 1), (64, 44, 16, 1),
    (128, 0, 0, 1), (128, 40, 0, 1), (128, 64, 0, 1), (128, 116, 0, 1), (104, 112, 16, 1), (64, 96, 32, 1), (0, 72, 32, 1), (0, 84, 72, 1), (0, 84, 128, 1), (0, 56, 88, 1), (16, 24, 72, 1), (72, 20, 72, 1), (112, 12, 56, 1), (96, 76, 48, 1), (80, 60, 40, 1), (56, 36, 16, 1),
    (96, 0, 0, 1), (96, 32, 0, 1), (96, 52, 0, 1), (96, 92, 0, 1), (80, 88, 8, 1), (56, 76, 24, 1), (0, 56, 24, 1), (0, 68, 56, 1), (0, 68, 96, 1), (0, 44, 72, 1), (16, 20, 56, 1), (56, 16, 56, 1), (88, 12, 48, 1), (72, 60, 40, 1), (64, 48, 32, 1), (40, 28, 8, 1),
]

def find_closest_color(pixel):
    if pixel[3] < 128:  # If alpha is less than 0.5 (128 in 0-255 range)
        return 0  # Index of fully transparent color
    
    pixel_rgb = pixel[:3]
    distances = [np.sum((np.array(color[:3]) - pixel_rgb)**2) for color in sprite_colors[1:]]  # Skip the first transparent color
    return distances.index(min(distances)) + 1

def process_image(image_path):
    img = Image.open(image_path).convert('RGBA')
    width, height = img.size
    
    if width > 24 or height > 24:
        print("Error: Image dimensions exceed 24x24 pixels")
        return
    
    pixel_data = list(img.getdata())
    color_indices = [find_closest_color(pixel) for pixel in pixel_data]
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    
    # Format the output
    output = f"# image\n"
    output += f"sprite_{timestamp}:byte[{width}*{height}] = [\n"
    for y in range(height):
        row = color_indices[y*width:(y+1)*width]
        output += ','.join(map(str, row))
        if y < height - 1:
            output += ','
        output += '\n'
    output += "]"
    
    print(output)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <path_to_image.png>")
    else:
        image_path = sys.argv[1]
        process_image(image_path)
